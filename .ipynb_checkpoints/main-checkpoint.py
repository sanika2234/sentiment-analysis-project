{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea98b364",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import emoji\n",
    "import string\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from textblob import TextBlob\n",
    "\n",
    "# Download required NLTK resources\n",
    "nltk.download('stopwords')\n",
    "nltk.download('punkt_tab')\n",
    "\n",
    "# Define global stopwords and punctuation\n",
    "stop_words = set(stopwords.words(\"english\"))\n",
    "exclude_punct = string.punctuation\n",
    "\n",
    "# ---------------------- Preprocessing Functions ----------------------\n",
    "\n",
    "def remove_html(text):\n",
    "    \"\"\"Remove HTML tags from text.\"\"\"\n",
    "    return re.sub(r\"<.*?>\", \"\", text)\n",
    "\n",
    "def remove_urls(text):\n",
    "    \"\"\"Remove URLs from text.\"\"\"\n",
    "    return re.sub(r\"(?:http|https|ftp)://\\S+\", \"\", text)\n",
    "\n",
    "def convert_emojis(text):\n",
    "    \"\"\"Convert emojis to text descriptions.\"\"\"\n",
    "    return emoji.demojize(text)\n",
    "\n",
    "def remove_punctuation(text):\n",
    "    \"\"\"Remove punctuation from text.\"\"\"\n",
    "    return text.translate(str.maketrans(\"\", \"\", exclude_punct))\n",
    "\n",
    "def remove_digits(text):\n",
    "    \"\"\"Remove digits from text and replace with spaces.\"\"\"\n",
    "    return ''.join([char if char.isalpha() or char.isspace() else ' ' for char in text])\n",
    "\n",
    "def remove_stopwords(text):\n",
    "    \"\"\"Remove English stopwords.\"\"\"\n",
    "    words = nltk.word_tokenize(text)\n",
    "    return ' '.join([word for word in words if word.lower() not in stop_words])\n",
    "\n",
    "def preprocess_text(text):\n",
    "    \"\"\"Apply all preprocessing steps to the input text.\"\"\"\n",
    "    text = text.lower()\n",
    "    text = remove_html(text)\n",
    "    text = remove_urls(text)\n",
    "    text = convert_emojis(text)\n",
    "    text = remove_punctuation(text)\n",
    "    text = remove_digits(text)\n",
    "    text = remove_stopwords(text)\n",
    "    return text\n",
    "\n",
    "# ---------------------- Sentiment Function ----------------------\n",
    "\n",
    "def get_sentiment(text):\n",
    "    \"\"\"Return sentiment category using TextBlob polarity score.\"\"\"\n",
    "    try:\n",
    "        polarity = TextBlob(text).sentiment.polarity\n",
    "        if polarity > 0:\n",
    "            return \"positive\"\n",
    "        elif polarity < 0:\n",
    "            return \"negative\"\n",
    "        else:\n",
    "            return \"neutral\"\n",
    "    except Exception as e:\n",
    "        print(f\"Error processing text: {text}\")\n",
    "        return \"error\"\n",
    "\n",
    "# ---------------------- Main Script ----------------------\n",
    "\n",
    "def main():\n",
    "    # Load and sample dataset\n",
    "    df = pd.read_csv(\"SentimentAnalysisDS.csv\")\n",
    "    \n",
    "    # Check for missing values and handle them\n",
    "    df['review'] = df['review'].fillna('')  # Replace NaNs with empty strings\n",
    "    \n",
    "    # Sample 100 random reviews for processing\n",
    "    df = df.sample(100).reset_index(drop=True)\n",
    "\n",
    "    # Preprocess reviews\n",
    "    df['cleaned_review'] = df['review'].apply(preprocess_text)\n",
    "\n",
    "    # Get sentiment labels\n",
    "    df['sentiment'] = df['cleaned_review'].apply(get_sentiment)\n",
    "\n",
    "    # Print sample output\n",
    "    print(df[['review', 'cleaned_review', 'sentiment']].head())\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
